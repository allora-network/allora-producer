// Code generated by mockery v2.46.0. DO NOT EDIT.

package v2types

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockMsgClient is an autogenerated mock type for the MsgClient type
type MockMsgClient struct {
	mock.Mock
}

type MockMsgClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMsgClient) EXPECT() *MockMsgClient_Expecter {
	return &MockMsgClient_Expecter{mock: &_m.Mock}
}

// AddStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddStake(ctx context.Context, in *MsgAddStake, opts ...grpc.CallOption) (*MsgAddStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddStake")
	}

	var r0 *MsgAddStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddStake, ...grpc.CallOption) (*MsgAddStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddStake, ...grpc.CallOption) *MsgAddStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_AddStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStake'
type MockMsgClient_AddStake_Call struct {
	*mock.Call
}

// AddStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgAddStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) AddStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_AddStake_Call {
	return &MockMsgClient_AddStake_Call{Call: _e.mock.On("AddStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_AddStake_Call) Run(run func(ctx context.Context, in *MsgAddStake, opts ...grpc.CallOption)) *MockMsgClient_AddStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgAddStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_AddStake_Call) Return(_a0 *MsgAddStakeResponse, _a1 error) *MockMsgClient_AddStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_AddStake_Call) RunAndReturn(run func(context.Context, *MsgAddStake, ...grpc.CallOption) (*MsgAddStakeResponse, error)) *MockMsgClient_AddStake_Call {
	_c.Call.Return(run)
	return _c
}

// AddToWhitelistAdmin provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddToWhitelistAdmin(ctx context.Context, in *MsgAddToWhitelistAdmin, opts ...grpc.CallOption) (*MsgAddToWhitelistAdminResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddToWhitelistAdmin")
	}

	var r0 *MsgAddToWhitelistAdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddToWhitelistAdmin, ...grpc.CallOption) (*MsgAddToWhitelistAdminResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddToWhitelistAdmin, ...grpc.CallOption) *MsgAddToWhitelistAdminResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddToWhitelistAdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddToWhitelistAdmin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_AddToWhitelistAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToWhitelistAdmin'
type MockMsgClient_AddToWhitelistAdmin_Call struct {
	*mock.Call
}

// AddToWhitelistAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgAddToWhitelistAdmin
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) AddToWhitelistAdmin(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_AddToWhitelistAdmin_Call {
	return &MockMsgClient_AddToWhitelistAdmin_Call{Call: _e.mock.On("AddToWhitelistAdmin",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_AddToWhitelistAdmin_Call) Run(run func(ctx context.Context, in *MsgAddToWhitelistAdmin, opts ...grpc.CallOption)) *MockMsgClient_AddToWhitelistAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgAddToWhitelistAdmin), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_AddToWhitelistAdmin_Call) Return(_a0 *MsgAddToWhitelistAdminResponse, _a1 error) *MockMsgClient_AddToWhitelistAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_AddToWhitelistAdmin_Call) RunAndReturn(run func(context.Context, *MsgAddToWhitelistAdmin, ...grpc.CallOption) (*MsgAddToWhitelistAdminResponse, error)) *MockMsgClient_AddToWhitelistAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// CancelRemoveDelegateStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CancelRemoveDelegateStake(ctx context.Context, in *MsgCancelRemoveDelegateStake, opts ...grpc.CallOption) (*MsgCancelRemoveDelegateStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelRemoveDelegateStake")
	}

	var r0 *MsgCancelRemoveDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveDelegateStake, ...grpc.CallOption) (*MsgCancelRemoveDelegateStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveDelegateStake, ...grpc.CallOption) *MsgCancelRemoveDelegateStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCancelRemoveDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCancelRemoveDelegateStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_CancelRemoveDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRemoveDelegateStake'
type MockMsgClient_CancelRemoveDelegateStake_Call struct {
	*mock.Call
}

// CancelRemoveDelegateStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgCancelRemoveDelegateStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) CancelRemoveDelegateStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_CancelRemoveDelegateStake_Call {
	return &MockMsgClient_CancelRemoveDelegateStake_Call{Call: _e.mock.On("CancelRemoveDelegateStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_CancelRemoveDelegateStake_Call) Run(run func(ctx context.Context, in *MsgCancelRemoveDelegateStake, opts ...grpc.CallOption)) *MockMsgClient_CancelRemoveDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgCancelRemoveDelegateStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_CancelRemoveDelegateStake_Call) Return(_a0 *MsgCancelRemoveDelegateStakeResponse, _a1 error) *MockMsgClient_CancelRemoveDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_CancelRemoveDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgCancelRemoveDelegateStake, ...grpc.CallOption) (*MsgCancelRemoveDelegateStakeResponse, error)) *MockMsgClient_CancelRemoveDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// CancelRemoveStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CancelRemoveStake(ctx context.Context, in *MsgCancelRemoveStake, opts ...grpc.CallOption) (*MsgCancelRemoveStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelRemoveStake")
	}

	var r0 *MsgCancelRemoveStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveStake, ...grpc.CallOption) (*MsgCancelRemoveStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveStake, ...grpc.CallOption) *MsgCancelRemoveStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCancelRemoveStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCancelRemoveStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_CancelRemoveStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRemoveStake'
type MockMsgClient_CancelRemoveStake_Call struct {
	*mock.Call
}

// CancelRemoveStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgCancelRemoveStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) CancelRemoveStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_CancelRemoveStake_Call {
	return &MockMsgClient_CancelRemoveStake_Call{Call: _e.mock.On("CancelRemoveStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_CancelRemoveStake_Call) Run(run func(ctx context.Context, in *MsgCancelRemoveStake, opts ...grpc.CallOption)) *MockMsgClient_CancelRemoveStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgCancelRemoveStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_CancelRemoveStake_Call) Return(_a0 *MsgCancelRemoveStakeResponse, _a1 error) *MockMsgClient_CancelRemoveStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_CancelRemoveStake_Call) RunAndReturn(run func(context.Context, *MsgCancelRemoveStake, ...grpc.CallOption) (*MsgCancelRemoveStakeResponse, error)) *MockMsgClient_CancelRemoveStake_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewTopic provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateNewTopic(ctx context.Context, in *MsgCreateNewTopic, opts ...grpc.CallOption) (*MsgCreateNewTopicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTopic")
	}

	var r0 *MsgCreateNewTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateNewTopic, ...grpc.CallOption) (*MsgCreateNewTopicResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateNewTopic, ...grpc.CallOption) *MsgCreateNewTopicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateNewTopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateNewTopic, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_CreateNewTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewTopic'
type MockMsgClient_CreateNewTopic_Call struct {
	*mock.Call
}

// CreateNewTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgCreateNewTopic
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) CreateNewTopic(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_CreateNewTopic_Call {
	return &MockMsgClient_CreateNewTopic_Call{Call: _e.mock.On("CreateNewTopic",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_CreateNewTopic_Call) Run(run func(ctx context.Context, in *MsgCreateNewTopic, opts ...grpc.CallOption)) *MockMsgClient_CreateNewTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgCreateNewTopic), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_CreateNewTopic_Call) Return(_a0 *MsgCreateNewTopicResponse, _a1 error) *MockMsgClient_CreateNewTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_CreateNewTopic_Call) RunAndReturn(run func(context.Context, *MsgCreateNewTopic, ...grpc.CallOption) (*MsgCreateNewTopicResponse, error)) *MockMsgClient_CreateNewTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DelegateStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DelegateStake(ctx context.Context, in *MsgDelegateStake, opts ...grpc.CallOption) (*MsgDelegateStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DelegateStake")
	}

	var r0 *MsgDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDelegateStake, ...grpc.CallOption) (*MsgDelegateStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDelegateStake, ...grpc.CallOption) *MsgDelegateStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDelegateStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_DelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegateStake'
type MockMsgClient_DelegateStake_Call struct {
	*mock.Call
}

// DelegateStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgDelegateStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) DelegateStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_DelegateStake_Call {
	return &MockMsgClient_DelegateStake_Call{Call: _e.mock.On("DelegateStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_DelegateStake_Call) Run(run func(ctx context.Context, in *MsgDelegateStake, opts ...grpc.CallOption)) *MockMsgClient_DelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgDelegateStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_DelegateStake_Call) Return(_a0 *MsgDelegateStakeResponse, _a1 error) *MockMsgClient_DelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_DelegateStake_Call) RunAndReturn(run func(context.Context, *MsgDelegateStake, ...grpc.CallOption) (*MsgDelegateStakeResponse, error)) *MockMsgClient_DelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// FundTopic provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) FundTopic(ctx context.Context, in *MsgFundTopic, opts ...grpc.CallOption) (*MsgFundTopicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FundTopic")
	}

	var r0 *MsgFundTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgFundTopic, ...grpc.CallOption) (*MsgFundTopicResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgFundTopic, ...grpc.CallOption) *MsgFundTopicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgFundTopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgFundTopic, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_FundTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FundTopic'
type MockMsgClient_FundTopic_Call struct {
	*mock.Call
}

// FundTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgFundTopic
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) FundTopic(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_FundTopic_Call {
	return &MockMsgClient_FundTopic_Call{Call: _e.mock.On("FundTopic",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_FundTopic_Call) Run(run func(ctx context.Context, in *MsgFundTopic, opts ...grpc.CallOption)) *MockMsgClient_FundTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgFundTopic), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_FundTopic_Call) Return(_a0 *MsgFundTopicResponse, _a1 error) *MockMsgClient_FundTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_FundTopic_Call) RunAndReturn(run func(context.Context, *MsgFundTopic, ...grpc.CallOption) (*MsgFundTopicResponse, error)) *MockMsgClient_FundTopic_Call {
	_c.Call.Return(run)
	return _c
}

// InsertReputerPayload provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) InsertReputerPayload(ctx context.Context, in *MsgInsertReputerPayload, opts ...grpc.CallOption) (*MsgInsertReputerPayloadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertReputerPayload")
	}

	var r0 *MsgInsertReputerPayloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertReputerPayload, ...grpc.CallOption) (*MsgInsertReputerPayloadResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertReputerPayload, ...grpc.CallOption) *MsgInsertReputerPayloadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInsertReputerPayloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInsertReputerPayload, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_InsertReputerPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertReputerPayload'
type MockMsgClient_InsertReputerPayload_Call struct {
	*mock.Call
}

// InsertReputerPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgInsertReputerPayload
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) InsertReputerPayload(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_InsertReputerPayload_Call {
	return &MockMsgClient_InsertReputerPayload_Call{Call: _e.mock.On("InsertReputerPayload",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_InsertReputerPayload_Call) Run(run func(ctx context.Context, in *MsgInsertReputerPayload, opts ...grpc.CallOption)) *MockMsgClient_InsertReputerPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgInsertReputerPayload), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_InsertReputerPayload_Call) Return(_a0 *MsgInsertReputerPayloadResponse, _a1 error) *MockMsgClient_InsertReputerPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_InsertReputerPayload_Call) RunAndReturn(run func(context.Context, *MsgInsertReputerPayload, ...grpc.CallOption) (*MsgInsertReputerPayloadResponse, error)) *MockMsgClient_InsertReputerPayload_Call {
	_c.Call.Return(run)
	return _c
}

// InsertWorkerPayload provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) InsertWorkerPayload(ctx context.Context, in *MsgInsertWorkerPayload, opts ...grpc.CallOption) (*MsgInsertWorkerPayloadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertWorkerPayload")
	}

	var r0 *MsgInsertWorkerPayloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertWorkerPayload, ...grpc.CallOption) (*MsgInsertWorkerPayloadResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertWorkerPayload, ...grpc.CallOption) *MsgInsertWorkerPayloadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInsertWorkerPayloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInsertWorkerPayload, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_InsertWorkerPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertWorkerPayload'
type MockMsgClient_InsertWorkerPayload_Call struct {
	*mock.Call
}

// InsertWorkerPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgInsertWorkerPayload
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) InsertWorkerPayload(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_InsertWorkerPayload_Call {
	return &MockMsgClient_InsertWorkerPayload_Call{Call: _e.mock.On("InsertWorkerPayload",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_InsertWorkerPayload_Call) Run(run func(ctx context.Context, in *MsgInsertWorkerPayload, opts ...grpc.CallOption)) *MockMsgClient_InsertWorkerPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgInsertWorkerPayload), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_InsertWorkerPayload_Call) Return(_a0 *MsgInsertWorkerPayloadResponse, _a1 error) *MockMsgClient_InsertWorkerPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_InsertWorkerPayload_Call) RunAndReturn(run func(context.Context, *MsgInsertWorkerPayload, ...grpc.CallOption) (*MsgInsertWorkerPayloadResponse, error)) *MockMsgClient_InsertWorkerPayload_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) Register(ctx context.Context, in *MsgRegister, opts ...grpc.CallOption) (*MsgRegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *MsgRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRegister, ...grpc.CallOption) (*MsgRegisterResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRegister, ...grpc.CallOption) *MsgRegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRegister, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockMsgClient_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRegister
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) Register(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_Register_Call {
	return &MockMsgClient_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_Register_Call) Run(run func(ctx context.Context, in *MsgRegister, opts ...grpc.CallOption)) *MockMsgClient_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRegister), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_Register_Call) Return(_a0 *MsgRegisterResponse, _a1 error) *MockMsgClient_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_Register_Call) RunAndReturn(run func(context.Context, *MsgRegister, ...grpc.CallOption) (*MsgRegisterResponse, error)) *MockMsgClient_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDelegateStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveDelegateStake(ctx context.Context, in *MsgRemoveDelegateStake, opts ...grpc.CallOption) (*MsgRemoveDelegateStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDelegateStake")
	}

	var r0 *MsgRemoveDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDelegateStake, ...grpc.CallOption) (*MsgRemoveDelegateStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDelegateStake, ...grpc.CallOption) *MsgRemoveDelegateStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveDelegateStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_RemoveDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDelegateStake'
type MockMsgClient_RemoveDelegateStake_Call struct {
	*mock.Call
}

// RemoveDelegateStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRemoveDelegateStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) RemoveDelegateStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_RemoveDelegateStake_Call {
	return &MockMsgClient_RemoveDelegateStake_Call{Call: _e.mock.On("RemoveDelegateStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_RemoveDelegateStake_Call) Run(run func(ctx context.Context, in *MsgRemoveDelegateStake, opts ...grpc.CallOption)) *MockMsgClient_RemoveDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRemoveDelegateStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_RemoveDelegateStake_Call) Return(_a0 *MsgRemoveDelegateStakeResponse, _a1 error) *MockMsgClient_RemoveDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_RemoveDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgRemoveDelegateStake, ...grpc.CallOption) (*MsgRemoveDelegateStakeResponse, error)) *MockMsgClient_RemoveDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromWhitelistAdmin provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveFromWhitelistAdmin(ctx context.Context, in *MsgRemoveFromWhitelistAdmin, opts ...grpc.CallOption) (*MsgRemoveFromWhitelistAdminResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromWhitelistAdmin")
	}

	var r0 *MsgRemoveFromWhitelistAdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveFromWhitelistAdmin, ...grpc.CallOption) (*MsgRemoveFromWhitelistAdminResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveFromWhitelistAdmin, ...grpc.CallOption) *MsgRemoveFromWhitelistAdminResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveFromWhitelistAdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveFromWhitelistAdmin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_RemoveFromWhitelistAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromWhitelistAdmin'
type MockMsgClient_RemoveFromWhitelistAdmin_Call struct {
	*mock.Call
}

// RemoveFromWhitelistAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRemoveFromWhitelistAdmin
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) RemoveFromWhitelistAdmin(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_RemoveFromWhitelistAdmin_Call {
	return &MockMsgClient_RemoveFromWhitelistAdmin_Call{Call: _e.mock.On("RemoveFromWhitelistAdmin",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_RemoveFromWhitelistAdmin_Call) Run(run func(ctx context.Context, in *MsgRemoveFromWhitelistAdmin, opts ...grpc.CallOption)) *MockMsgClient_RemoveFromWhitelistAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRemoveFromWhitelistAdmin), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_RemoveFromWhitelistAdmin_Call) Return(_a0 *MsgRemoveFromWhitelistAdminResponse, _a1 error) *MockMsgClient_RemoveFromWhitelistAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_RemoveFromWhitelistAdmin_Call) RunAndReturn(run func(context.Context, *MsgRemoveFromWhitelistAdmin, ...grpc.CallOption) (*MsgRemoveFromWhitelistAdminResponse, error)) *MockMsgClient_RemoveFromWhitelistAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRegistration provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveRegistration(ctx context.Context, in *MsgRemoveRegistration, opts ...grpc.CallOption) (*MsgRemoveRegistrationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRegistration")
	}

	var r0 *MsgRemoveRegistrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRegistration, ...grpc.CallOption) (*MsgRemoveRegistrationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRegistration, ...grpc.CallOption) *MsgRemoveRegistrationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveRegistrationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveRegistration, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_RemoveRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRegistration'
type MockMsgClient_RemoveRegistration_Call struct {
	*mock.Call
}

// RemoveRegistration is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRemoveRegistration
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) RemoveRegistration(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_RemoveRegistration_Call {
	return &MockMsgClient_RemoveRegistration_Call{Call: _e.mock.On("RemoveRegistration",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_RemoveRegistration_Call) Run(run func(ctx context.Context, in *MsgRemoveRegistration, opts ...grpc.CallOption)) *MockMsgClient_RemoveRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRemoveRegistration), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_RemoveRegistration_Call) Return(_a0 *MsgRemoveRegistrationResponse, _a1 error) *MockMsgClient_RemoveRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_RemoveRegistration_Call) RunAndReturn(run func(context.Context, *MsgRemoveRegistration, ...grpc.CallOption) (*MsgRemoveRegistrationResponse, error)) *MockMsgClient_RemoveRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveStake(ctx context.Context, in *MsgRemoveStake, opts ...grpc.CallOption) (*MsgRemoveStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStake")
	}

	var r0 *MsgRemoveStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveStake, ...grpc.CallOption) (*MsgRemoveStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveStake, ...grpc.CallOption) *MsgRemoveStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_RemoveStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStake'
type MockMsgClient_RemoveStake_Call struct {
	*mock.Call
}

// RemoveStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRemoveStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) RemoveStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_RemoveStake_Call {
	return &MockMsgClient_RemoveStake_Call{Call: _e.mock.On("RemoveStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_RemoveStake_Call) Run(run func(ctx context.Context, in *MsgRemoveStake, opts ...grpc.CallOption)) *MockMsgClient_RemoveStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRemoveStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_RemoveStake_Call) Return(_a0 *MsgRemoveStakeResponse, _a1 error) *MockMsgClient_RemoveStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_RemoveStake_Call) RunAndReturn(run func(context.Context, *MsgRemoveStake, ...grpc.CallOption) (*MsgRemoveStakeResponse, error)) *MockMsgClient_RemoveStake_Call {
	_c.Call.Return(run)
	return _c
}

// RewardDelegateStake provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RewardDelegateStake(ctx context.Context, in *MsgRewardDelegateStake, opts ...grpc.CallOption) (*MsgRewardDelegateStakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RewardDelegateStake")
	}

	var r0 *MsgRewardDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRewardDelegateStake, ...grpc.CallOption) (*MsgRewardDelegateStakeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRewardDelegateStake, ...grpc.CallOption) *MsgRewardDelegateStakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRewardDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRewardDelegateStake, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_RewardDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RewardDelegateStake'
type MockMsgClient_RewardDelegateStake_Call struct {
	*mock.Call
}

// RewardDelegateStake is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgRewardDelegateStake
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) RewardDelegateStake(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_RewardDelegateStake_Call {
	return &MockMsgClient_RewardDelegateStake_Call{Call: _e.mock.On("RewardDelegateStake",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_RewardDelegateStake_Call) Run(run func(ctx context.Context, in *MsgRewardDelegateStake, opts ...grpc.CallOption)) *MockMsgClient_RewardDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgRewardDelegateStake), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_RewardDelegateStake_Call) Return(_a0 *MsgRewardDelegateStakeResponse, _a1 error) *MockMsgClient_RewardDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_RewardDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgRewardDelegateStake, ...grpc.CallOption) (*MsgRewardDelegateStakeResponse, error)) *MockMsgClient_RewardDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParams provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParams")
	}

	var r0 *MsgUpdateParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) (*MsgUpdateParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) *MsgUpdateParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgClient_UpdateParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParams'
type MockMsgClient_UpdateParams_Call struct {
	*mock.Call
}

// UpdateParams is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MsgUpdateParams
//   - opts ...grpc.CallOption
func (_e *MockMsgClient_Expecter) UpdateParams(ctx interface{}, in interface{}, opts ...interface{}) *MockMsgClient_UpdateParams_Call {
	return &MockMsgClient_UpdateParams_Call{Call: _e.mock.On("UpdateParams",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMsgClient_UpdateParams_Call) Run(run func(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption)) *MockMsgClient_UpdateParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MsgUpdateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockMsgClient_UpdateParams_Call) Return(_a0 *MsgUpdateParamsResponse, _a1 error) *MockMsgClient_UpdateParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgClient_UpdateParams_Call) RunAndReturn(run func(context.Context, *MsgUpdateParams, ...grpc.CallOption) (*MsgUpdateParamsResponse, error)) *MockMsgClient_UpdateParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMsgClient creates a new instance of MockMsgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMsgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMsgClient {
	mock := &MockMsgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
