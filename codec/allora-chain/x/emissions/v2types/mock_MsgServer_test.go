// Code generated by mockery v2.46.0. DO NOT EDIT.

package v2types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMsgServer is an autogenerated mock type for the MsgServer type
type MockMsgServer struct {
	mock.Mock
}

type MockMsgServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMsgServer) EXPECT() *MockMsgServer_Expecter {
	return &MockMsgServer_Expecter{mock: &_m.Mock}
}

// AddStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) AddStake(_a0 context.Context, _a1 *MsgAddStake) (*MsgAddStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddStake")
	}

	var r0 *MsgAddStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddStake) (*MsgAddStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddStake) *MsgAddStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_AddStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStake'
type MockMsgServer_AddStake_Call struct {
	*mock.Call
}

// AddStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgAddStake
func (_e *MockMsgServer_Expecter) AddStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_AddStake_Call {
	return &MockMsgServer_AddStake_Call{Call: _e.mock.On("AddStake", _a0, _a1)}
}

func (_c *MockMsgServer_AddStake_Call) Run(run func(_a0 context.Context, _a1 *MsgAddStake)) *MockMsgServer_AddStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgAddStake))
	})
	return _c
}

func (_c *MockMsgServer_AddStake_Call) Return(_a0 *MsgAddStakeResponse, _a1 error) *MockMsgServer_AddStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_AddStake_Call) RunAndReturn(run func(context.Context, *MsgAddStake) (*MsgAddStakeResponse, error)) *MockMsgServer_AddStake_Call {
	_c.Call.Return(run)
	return _c
}

// AddToWhitelistAdmin provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) AddToWhitelistAdmin(_a0 context.Context, _a1 *MsgAddToWhitelistAdmin) (*MsgAddToWhitelistAdminResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddToWhitelistAdmin")
	}

	var r0 *MsgAddToWhitelistAdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddToWhitelistAdmin) (*MsgAddToWhitelistAdminResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddToWhitelistAdmin) *MsgAddToWhitelistAdminResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddToWhitelistAdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddToWhitelistAdmin) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_AddToWhitelistAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToWhitelistAdmin'
type MockMsgServer_AddToWhitelistAdmin_Call struct {
	*mock.Call
}

// AddToWhitelistAdmin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgAddToWhitelistAdmin
func (_e *MockMsgServer_Expecter) AddToWhitelistAdmin(_a0 interface{}, _a1 interface{}) *MockMsgServer_AddToWhitelistAdmin_Call {
	return &MockMsgServer_AddToWhitelistAdmin_Call{Call: _e.mock.On("AddToWhitelistAdmin", _a0, _a1)}
}

func (_c *MockMsgServer_AddToWhitelistAdmin_Call) Run(run func(_a0 context.Context, _a1 *MsgAddToWhitelistAdmin)) *MockMsgServer_AddToWhitelistAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgAddToWhitelistAdmin))
	})
	return _c
}

func (_c *MockMsgServer_AddToWhitelistAdmin_Call) Return(_a0 *MsgAddToWhitelistAdminResponse, _a1 error) *MockMsgServer_AddToWhitelistAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_AddToWhitelistAdmin_Call) RunAndReturn(run func(context.Context, *MsgAddToWhitelistAdmin) (*MsgAddToWhitelistAdminResponse, error)) *MockMsgServer_AddToWhitelistAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// CancelRemoveDelegateStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) CancelRemoveDelegateStake(_a0 context.Context, _a1 *MsgCancelRemoveDelegateStake) (*MsgCancelRemoveDelegateStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelRemoveDelegateStake")
	}

	var r0 *MsgCancelRemoveDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveDelegateStake) (*MsgCancelRemoveDelegateStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveDelegateStake) *MsgCancelRemoveDelegateStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCancelRemoveDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCancelRemoveDelegateStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_CancelRemoveDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRemoveDelegateStake'
type MockMsgServer_CancelRemoveDelegateStake_Call struct {
	*mock.Call
}

// CancelRemoveDelegateStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgCancelRemoveDelegateStake
func (_e *MockMsgServer_Expecter) CancelRemoveDelegateStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_CancelRemoveDelegateStake_Call {
	return &MockMsgServer_CancelRemoveDelegateStake_Call{Call: _e.mock.On("CancelRemoveDelegateStake", _a0, _a1)}
}

func (_c *MockMsgServer_CancelRemoveDelegateStake_Call) Run(run func(_a0 context.Context, _a1 *MsgCancelRemoveDelegateStake)) *MockMsgServer_CancelRemoveDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgCancelRemoveDelegateStake))
	})
	return _c
}

func (_c *MockMsgServer_CancelRemoveDelegateStake_Call) Return(_a0 *MsgCancelRemoveDelegateStakeResponse, _a1 error) *MockMsgServer_CancelRemoveDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_CancelRemoveDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgCancelRemoveDelegateStake) (*MsgCancelRemoveDelegateStakeResponse, error)) *MockMsgServer_CancelRemoveDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// CancelRemoveStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) CancelRemoveStake(_a0 context.Context, _a1 *MsgCancelRemoveStake) (*MsgCancelRemoveStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelRemoveStake")
	}

	var r0 *MsgCancelRemoveStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveStake) (*MsgCancelRemoveStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCancelRemoveStake) *MsgCancelRemoveStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCancelRemoveStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCancelRemoveStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_CancelRemoveStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRemoveStake'
type MockMsgServer_CancelRemoveStake_Call struct {
	*mock.Call
}

// CancelRemoveStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgCancelRemoveStake
func (_e *MockMsgServer_Expecter) CancelRemoveStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_CancelRemoveStake_Call {
	return &MockMsgServer_CancelRemoveStake_Call{Call: _e.mock.On("CancelRemoveStake", _a0, _a1)}
}

func (_c *MockMsgServer_CancelRemoveStake_Call) Run(run func(_a0 context.Context, _a1 *MsgCancelRemoveStake)) *MockMsgServer_CancelRemoveStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgCancelRemoveStake))
	})
	return _c
}

func (_c *MockMsgServer_CancelRemoveStake_Call) Return(_a0 *MsgCancelRemoveStakeResponse, _a1 error) *MockMsgServer_CancelRemoveStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_CancelRemoveStake_Call) RunAndReturn(run func(context.Context, *MsgCancelRemoveStake) (*MsgCancelRemoveStakeResponse, error)) *MockMsgServer_CancelRemoveStake_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewTopic provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) CreateNewTopic(_a0 context.Context, _a1 *MsgCreateNewTopic) (*MsgCreateNewTopicResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTopic")
	}

	var r0 *MsgCreateNewTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateNewTopic) (*MsgCreateNewTopicResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateNewTopic) *MsgCreateNewTopicResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateNewTopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateNewTopic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_CreateNewTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewTopic'
type MockMsgServer_CreateNewTopic_Call struct {
	*mock.Call
}

// CreateNewTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgCreateNewTopic
func (_e *MockMsgServer_Expecter) CreateNewTopic(_a0 interface{}, _a1 interface{}) *MockMsgServer_CreateNewTopic_Call {
	return &MockMsgServer_CreateNewTopic_Call{Call: _e.mock.On("CreateNewTopic", _a0, _a1)}
}

func (_c *MockMsgServer_CreateNewTopic_Call) Run(run func(_a0 context.Context, _a1 *MsgCreateNewTopic)) *MockMsgServer_CreateNewTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgCreateNewTopic))
	})
	return _c
}

func (_c *MockMsgServer_CreateNewTopic_Call) Return(_a0 *MsgCreateNewTopicResponse, _a1 error) *MockMsgServer_CreateNewTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_CreateNewTopic_Call) RunAndReturn(run func(context.Context, *MsgCreateNewTopic) (*MsgCreateNewTopicResponse, error)) *MockMsgServer_CreateNewTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DelegateStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) DelegateStake(_a0 context.Context, _a1 *MsgDelegateStake) (*MsgDelegateStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DelegateStake")
	}

	var r0 *MsgDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDelegateStake) (*MsgDelegateStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDelegateStake) *MsgDelegateStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDelegateStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_DelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegateStake'
type MockMsgServer_DelegateStake_Call struct {
	*mock.Call
}

// DelegateStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgDelegateStake
func (_e *MockMsgServer_Expecter) DelegateStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_DelegateStake_Call {
	return &MockMsgServer_DelegateStake_Call{Call: _e.mock.On("DelegateStake", _a0, _a1)}
}

func (_c *MockMsgServer_DelegateStake_Call) Run(run func(_a0 context.Context, _a1 *MsgDelegateStake)) *MockMsgServer_DelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgDelegateStake))
	})
	return _c
}

func (_c *MockMsgServer_DelegateStake_Call) Return(_a0 *MsgDelegateStakeResponse, _a1 error) *MockMsgServer_DelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_DelegateStake_Call) RunAndReturn(run func(context.Context, *MsgDelegateStake) (*MsgDelegateStakeResponse, error)) *MockMsgServer_DelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// FundTopic provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) FundTopic(_a0 context.Context, _a1 *MsgFundTopic) (*MsgFundTopicResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FundTopic")
	}

	var r0 *MsgFundTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgFundTopic) (*MsgFundTopicResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgFundTopic) *MsgFundTopicResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgFundTopicResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgFundTopic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_FundTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FundTopic'
type MockMsgServer_FundTopic_Call struct {
	*mock.Call
}

// FundTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgFundTopic
func (_e *MockMsgServer_Expecter) FundTopic(_a0 interface{}, _a1 interface{}) *MockMsgServer_FundTopic_Call {
	return &MockMsgServer_FundTopic_Call{Call: _e.mock.On("FundTopic", _a0, _a1)}
}

func (_c *MockMsgServer_FundTopic_Call) Run(run func(_a0 context.Context, _a1 *MsgFundTopic)) *MockMsgServer_FundTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgFundTopic))
	})
	return _c
}

func (_c *MockMsgServer_FundTopic_Call) Return(_a0 *MsgFundTopicResponse, _a1 error) *MockMsgServer_FundTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_FundTopic_Call) RunAndReturn(run func(context.Context, *MsgFundTopic) (*MsgFundTopicResponse, error)) *MockMsgServer_FundTopic_Call {
	_c.Call.Return(run)
	return _c
}

// InsertReputerPayload provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) InsertReputerPayload(_a0 context.Context, _a1 *MsgInsertReputerPayload) (*MsgInsertReputerPayloadResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertReputerPayload")
	}

	var r0 *MsgInsertReputerPayloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertReputerPayload) (*MsgInsertReputerPayloadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertReputerPayload) *MsgInsertReputerPayloadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInsertReputerPayloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInsertReputerPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_InsertReputerPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertReputerPayload'
type MockMsgServer_InsertReputerPayload_Call struct {
	*mock.Call
}

// InsertReputerPayload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgInsertReputerPayload
func (_e *MockMsgServer_Expecter) InsertReputerPayload(_a0 interface{}, _a1 interface{}) *MockMsgServer_InsertReputerPayload_Call {
	return &MockMsgServer_InsertReputerPayload_Call{Call: _e.mock.On("InsertReputerPayload", _a0, _a1)}
}

func (_c *MockMsgServer_InsertReputerPayload_Call) Run(run func(_a0 context.Context, _a1 *MsgInsertReputerPayload)) *MockMsgServer_InsertReputerPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgInsertReputerPayload))
	})
	return _c
}

func (_c *MockMsgServer_InsertReputerPayload_Call) Return(_a0 *MsgInsertReputerPayloadResponse, _a1 error) *MockMsgServer_InsertReputerPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_InsertReputerPayload_Call) RunAndReturn(run func(context.Context, *MsgInsertReputerPayload) (*MsgInsertReputerPayloadResponse, error)) *MockMsgServer_InsertReputerPayload_Call {
	_c.Call.Return(run)
	return _c
}

// InsertWorkerPayload provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) InsertWorkerPayload(_a0 context.Context, _a1 *MsgInsertWorkerPayload) (*MsgInsertWorkerPayloadResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertWorkerPayload")
	}

	var r0 *MsgInsertWorkerPayloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertWorkerPayload) (*MsgInsertWorkerPayloadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInsertWorkerPayload) *MsgInsertWorkerPayloadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInsertWorkerPayloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInsertWorkerPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_InsertWorkerPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertWorkerPayload'
type MockMsgServer_InsertWorkerPayload_Call struct {
	*mock.Call
}

// InsertWorkerPayload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgInsertWorkerPayload
func (_e *MockMsgServer_Expecter) InsertWorkerPayload(_a0 interface{}, _a1 interface{}) *MockMsgServer_InsertWorkerPayload_Call {
	return &MockMsgServer_InsertWorkerPayload_Call{Call: _e.mock.On("InsertWorkerPayload", _a0, _a1)}
}

func (_c *MockMsgServer_InsertWorkerPayload_Call) Run(run func(_a0 context.Context, _a1 *MsgInsertWorkerPayload)) *MockMsgServer_InsertWorkerPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgInsertWorkerPayload))
	})
	return _c
}

func (_c *MockMsgServer_InsertWorkerPayload_Call) Return(_a0 *MsgInsertWorkerPayloadResponse, _a1 error) *MockMsgServer_InsertWorkerPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_InsertWorkerPayload_Call) RunAndReturn(run func(context.Context, *MsgInsertWorkerPayload) (*MsgInsertWorkerPayloadResponse, error)) *MockMsgServer_InsertWorkerPayload_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) Register(_a0 context.Context, _a1 *MsgRegister) (*MsgRegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *MsgRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRegister) (*MsgRegisterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRegister) *MsgRegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRegister) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockMsgServer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRegister
func (_e *MockMsgServer_Expecter) Register(_a0 interface{}, _a1 interface{}) *MockMsgServer_Register_Call {
	return &MockMsgServer_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *MockMsgServer_Register_Call) Run(run func(_a0 context.Context, _a1 *MsgRegister)) *MockMsgServer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRegister))
	})
	return _c
}

func (_c *MockMsgServer_Register_Call) Return(_a0 *MsgRegisterResponse, _a1 error) *MockMsgServer_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_Register_Call) RunAndReturn(run func(context.Context, *MsgRegister) (*MsgRegisterResponse, error)) *MockMsgServer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDelegateStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) RemoveDelegateStake(_a0 context.Context, _a1 *MsgRemoveDelegateStake) (*MsgRemoveDelegateStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDelegateStake")
	}

	var r0 *MsgRemoveDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDelegateStake) (*MsgRemoveDelegateStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDelegateStake) *MsgRemoveDelegateStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveDelegateStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_RemoveDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDelegateStake'
type MockMsgServer_RemoveDelegateStake_Call struct {
	*mock.Call
}

// RemoveDelegateStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRemoveDelegateStake
func (_e *MockMsgServer_Expecter) RemoveDelegateStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_RemoveDelegateStake_Call {
	return &MockMsgServer_RemoveDelegateStake_Call{Call: _e.mock.On("RemoveDelegateStake", _a0, _a1)}
}

func (_c *MockMsgServer_RemoveDelegateStake_Call) Run(run func(_a0 context.Context, _a1 *MsgRemoveDelegateStake)) *MockMsgServer_RemoveDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRemoveDelegateStake))
	})
	return _c
}

func (_c *MockMsgServer_RemoveDelegateStake_Call) Return(_a0 *MsgRemoveDelegateStakeResponse, _a1 error) *MockMsgServer_RemoveDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_RemoveDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgRemoveDelegateStake) (*MsgRemoveDelegateStakeResponse, error)) *MockMsgServer_RemoveDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromWhitelistAdmin provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) RemoveFromWhitelistAdmin(_a0 context.Context, _a1 *MsgRemoveFromWhitelistAdmin) (*MsgRemoveFromWhitelistAdminResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromWhitelistAdmin")
	}

	var r0 *MsgRemoveFromWhitelistAdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveFromWhitelistAdmin) (*MsgRemoveFromWhitelistAdminResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveFromWhitelistAdmin) *MsgRemoveFromWhitelistAdminResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveFromWhitelistAdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveFromWhitelistAdmin) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_RemoveFromWhitelistAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromWhitelistAdmin'
type MockMsgServer_RemoveFromWhitelistAdmin_Call struct {
	*mock.Call
}

// RemoveFromWhitelistAdmin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRemoveFromWhitelistAdmin
func (_e *MockMsgServer_Expecter) RemoveFromWhitelistAdmin(_a0 interface{}, _a1 interface{}) *MockMsgServer_RemoveFromWhitelistAdmin_Call {
	return &MockMsgServer_RemoveFromWhitelistAdmin_Call{Call: _e.mock.On("RemoveFromWhitelistAdmin", _a0, _a1)}
}

func (_c *MockMsgServer_RemoveFromWhitelistAdmin_Call) Run(run func(_a0 context.Context, _a1 *MsgRemoveFromWhitelistAdmin)) *MockMsgServer_RemoveFromWhitelistAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRemoveFromWhitelistAdmin))
	})
	return _c
}

func (_c *MockMsgServer_RemoveFromWhitelistAdmin_Call) Return(_a0 *MsgRemoveFromWhitelistAdminResponse, _a1 error) *MockMsgServer_RemoveFromWhitelistAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_RemoveFromWhitelistAdmin_Call) RunAndReturn(run func(context.Context, *MsgRemoveFromWhitelistAdmin) (*MsgRemoveFromWhitelistAdminResponse, error)) *MockMsgServer_RemoveFromWhitelistAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRegistration provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) RemoveRegistration(_a0 context.Context, _a1 *MsgRemoveRegistration) (*MsgRemoveRegistrationResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRegistration")
	}

	var r0 *MsgRemoveRegistrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRegistration) (*MsgRemoveRegistrationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRegistration) *MsgRemoveRegistrationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveRegistrationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveRegistration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_RemoveRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRegistration'
type MockMsgServer_RemoveRegistration_Call struct {
	*mock.Call
}

// RemoveRegistration is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRemoveRegistration
func (_e *MockMsgServer_Expecter) RemoveRegistration(_a0 interface{}, _a1 interface{}) *MockMsgServer_RemoveRegistration_Call {
	return &MockMsgServer_RemoveRegistration_Call{Call: _e.mock.On("RemoveRegistration", _a0, _a1)}
}

func (_c *MockMsgServer_RemoveRegistration_Call) Run(run func(_a0 context.Context, _a1 *MsgRemoveRegistration)) *MockMsgServer_RemoveRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRemoveRegistration))
	})
	return _c
}

func (_c *MockMsgServer_RemoveRegistration_Call) Return(_a0 *MsgRemoveRegistrationResponse, _a1 error) *MockMsgServer_RemoveRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_RemoveRegistration_Call) RunAndReturn(run func(context.Context, *MsgRemoveRegistration) (*MsgRemoveRegistrationResponse, error)) *MockMsgServer_RemoveRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) RemoveStake(_a0 context.Context, _a1 *MsgRemoveStake) (*MsgRemoveStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStake")
	}

	var r0 *MsgRemoveStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveStake) (*MsgRemoveStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveStake) *MsgRemoveStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_RemoveStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStake'
type MockMsgServer_RemoveStake_Call struct {
	*mock.Call
}

// RemoveStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRemoveStake
func (_e *MockMsgServer_Expecter) RemoveStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_RemoveStake_Call {
	return &MockMsgServer_RemoveStake_Call{Call: _e.mock.On("RemoveStake", _a0, _a1)}
}

func (_c *MockMsgServer_RemoveStake_Call) Run(run func(_a0 context.Context, _a1 *MsgRemoveStake)) *MockMsgServer_RemoveStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRemoveStake))
	})
	return _c
}

func (_c *MockMsgServer_RemoveStake_Call) Return(_a0 *MsgRemoveStakeResponse, _a1 error) *MockMsgServer_RemoveStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_RemoveStake_Call) RunAndReturn(run func(context.Context, *MsgRemoveStake) (*MsgRemoveStakeResponse, error)) *MockMsgServer_RemoveStake_Call {
	_c.Call.Return(run)
	return _c
}

// RewardDelegateStake provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) RewardDelegateStake(_a0 context.Context, _a1 *MsgRewardDelegateStake) (*MsgRewardDelegateStakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RewardDelegateStake")
	}

	var r0 *MsgRewardDelegateStakeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRewardDelegateStake) (*MsgRewardDelegateStakeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRewardDelegateStake) *MsgRewardDelegateStakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRewardDelegateStakeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRewardDelegateStake) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_RewardDelegateStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RewardDelegateStake'
type MockMsgServer_RewardDelegateStake_Call struct {
	*mock.Call
}

// RewardDelegateStake is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgRewardDelegateStake
func (_e *MockMsgServer_Expecter) RewardDelegateStake(_a0 interface{}, _a1 interface{}) *MockMsgServer_RewardDelegateStake_Call {
	return &MockMsgServer_RewardDelegateStake_Call{Call: _e.mock.On("RewardDelegateStake", _a0, _a1)}
}

func (_c *MockMsgServer_RewardDelegateStake_Call) Run(run func(_a0 context.Context, _a1 *MsgRewardDelegateStake)) *MockMsgServer_RewardDelegateStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgRewardDelegateStake))
	})
	return _c
}

func (_c *MockMsgServer_RewardDelegateStake_Call) Return(_a0 *MsgRewardDelegateStakeResponse, _a1 error) *MockMsgServer_RewardDelegateStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_RewardDelegateStake_Call) RunAndReturn(run func(context.Context, *MsgRewardDelegateStake) (*MsgRewardDelegateStakeResponse, error)) *MockMsgServer_RewardDelegateStake_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParams provides a mock function with given fields: _a0, _a1
func (_m *MockMsgServer) UpdateParams(_a0 context.Context, _a1 *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParams")
	}

	var r0 *MsgUpdateParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams) *MsgUpdateParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMsgServer_UpdateParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParams'
type MockMsgServer_UpdateParams_Call struct {
	*mock.Call
}

// UpdateParams is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *MsgUpdateParams
func (_e *MockMsgServer_Expecter) UpdateParams(_a0 interface{}, _a1 interface{}) *MockMsgServer_UpdateParams_Call {
	return &MockMsgServer_UpdateParams_Call{Call: _e.mock.On("UpdateParams", _a0, _a1)}
}

func (_c *MockMsgServer_UpdateParams_Call) Run(run func(_a0 context.Context, _a1 *MsgUpdateParams)) *MockMsgServer_UpdateParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MsgUpdateParams))
	})
	return _c
}

func (_c *MockMsgServer_UpdateParams_Call) Return(_a0 *MsgUpdateParamsResponse, _a1 error) *MockMsgServer_UpdateParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMsgServer_UpdateParams_Call) RunAndReturn(run func(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)) *MockMsgServer_UpdateParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMsgServer creates a new instance of MockMsgServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMsgServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMsgServer {
	mock := &MockMsgServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
