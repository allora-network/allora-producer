// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	proto "github.com/cosmos/gogoproto/proto"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/abci/types"
)

// SDKTypes is an autogenerated mock type for the SDKTypes type
type SDKTypes struct {
	mock.Mock
}

type SDKTypes_Expecter struct {
	mock *mock.Mock
}

func (_m *SDKTypes) EXPECT() *SDKTypes_Expecter {
	return &SDKTypes_Expecter{mock: &_m.Mock}
}

// ParseTypedEvent provides a mock function with given fields: event
func (_m *SDKTypes) ParseTypedEvent(event types.Event) (proto.Message, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ParseTypedEvent")
	}

	var r0 proto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Event) (proto.Message, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(types.Event) proto.Message); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKTypes_ParseTypedEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseTypedEvent'
type SDKTypes_ParseTypedEvent_Call struct {
	*mock.Call
}

// ParseTypedEvent is a helper method to define mock.On call
//   - event types.Event
func (_e *SDKTypes_Expecter) ParseTypedEvent(event interface{}) *SDKTypes_ParseTypedEvent_Call {
	return &SDKTypes_ParseTypedEvent_Call{Call: _e.mock.On("ParseTypedEvent", event)}
}

func (_c *SDKTypes_ParseTypedEvent_Call) Run(run func(event types.Event)) *SDKTypes_ParseTypedEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Event))
	})
	return _c
}

func (_c *SDKTypes_ParseTypedEvent_Call) Return(_a0 proto.Message, _a1 error) *SDKTypes_ParseTypedEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SDKTypes_ParseTypedEvent_Call) RunAndReturn(run func(types.Event) (proto.Message, error)) *SDKTypes_ParseTypedEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewSDKTypes creates a new instance of SDKTypes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDKTypes(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDKTypes {
	mock := &SDKTypes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
