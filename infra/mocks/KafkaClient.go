// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kgo "github.com/twmb/franz-go/pkg/kgo"

	mock "github.com/stretchr/testify/mock"
)

// KafkaClient is an autogenerated mock type for the KafkaClient type
type KafkaClient struct {
	mock.Mock
}

type KafkaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaClient) EXPECT() *KafkaClient_Expecter {
	return &KafkaClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *KafkaClient) Close() {
	_m.Called()
}

// KafkaClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type KafkaClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *KafkaClient_Expecter) Close() *KafkaClient_Close_Call {
	return &KafkaClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *KafkaClient_Close_Call) Run(run func()) *KafkaClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaClient_Close_Call) Return() *KafkaClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaClient_Close_Call) RunAndReturn(run func()) *KafkaClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx
func (_m *KafkaClient) Flush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KafkaClient_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type KafkaClient_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KafkaClient_Expecter) Flush(ctx interface{}) *KafkaClient_Flush_Call {
	return &KafkaClient_Flush_Call{Call: _e.mock.On("Flush", ctx)}
}

func (_c *KafkaClient_Flush_Call) Run(run func(ctx context.Context)) *KafkaClient_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KafkaClient_Flush_Call) Return(_a0 error) *KafkaClient_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaClient_Flush_Call) RunAndReturn(run func(context.Context) error) *KafkaClient_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Produce provides a mock function with given fields: ctx, r, promise
func (_m *KafkaClient) Produce(ctx context.Context, r *kgo.Record, promise func(*kgo.Record, error)) {
	_m.Called(ctx, r, promise)
}

// KafkaClient_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type KafkaClient_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - r *kgo.Record
//   - promise func(*kgo.Record , error)
func (_e *KafkaClient_Expecter) Produce(ctx interface{}, r interface{}, promise interface{}) *KafkaClient_Produce_Call {
	return &KafkaClient_Produce_Call{Call: _e.mock.On("Produce", ctx, r, promise)}
}

func (_c *KafkaClient_Produce_Call) Run(run func(ctx context.Context, r *kgo.Record, promise func(*kgo.Record, error))) *KafkaClient_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*kgo.Record), args[2].(func(*kgo.Record, error)))
	})
	return _c
}

func (_c *KafkaClient_Produce_Call) Return() *KafkaClient_Produce_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaClient_Produce_Call) RunAndReturn(run func(context.Context, *kgo.Record, func(*kgo.Record, error))) *KafkaClient_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewKafkaClient creates a new instance of KafkaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaClient {
	mock := &KafkaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
