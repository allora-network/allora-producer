// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	config "github.com/allora-network/allora-producer/config"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// InitConfig provides a mock function with given fields:
func (_m *Provider) InitConfig() (config.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitConfig")
	}

	var r0 config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (config.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_InitConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitConfig'
type Provider_InitConfig_Call struct {
	*mock.Call
}

// InitConfig is a helper method to define mock.On call
func (_e *Provider_Expecter) InitConfig() *Provider_InitConfig_Call {
	return &Provider_InitConfig_Call{Call: _e.mock.On("InitConfig")}
}

func (_c *Provider_InitConfig_Call) Run(run func()) *Provider_InitConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_InitConfig_Call) Return(_a0 config.Config, _a1 error) *Provider_InitConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_InitConfig_Call) RunAndReturn(run func() (config.Config, error)) *Provider_InitConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
