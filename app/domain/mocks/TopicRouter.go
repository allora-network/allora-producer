// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TopicRouter is an autogenerated mock type for the TopicRouter type
type TopicRouter struct {
	mock.Mock
}

type TopicRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *TopicRouter) EXPECT() *TopicRouter_Expecter {
	return &TopicRouter_Expecter{mock: &_m.Mock}
}

// GetTopic provides a mock function with given fields: msgType
func (_m *TopicRouter) GetTopic(msgType string) (string, error) {
	ret := _m.Called(msgType)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(msgType)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(msgType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(msgType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicRouter_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type TopicRouter_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - msgType string
func (_e *TopicRouter_Expecter) GetTopic(msgType interface{}) *TopicRouter_GetTopic_Call {
	return &TopicRouter_GetTopic_Call{Call: _e.mock.On("GetTopic", msgType)}
}

func (_c *TopicRouter_GetTopic_Call) Run(run func(msgType string)) *TopicRouter_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TopicRouter_GetTopic_Call) Return(_a0 string, _a1 error) *TopicRouter_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TopicRouter_GetTopic_Call) RunAndReturn(run func(string) (string, error)) *TopicRouter_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// NewTopicRouter creates a new instance of TopicRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopicRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicRouter {
	mock := &TopicRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
