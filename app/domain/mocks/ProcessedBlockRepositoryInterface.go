// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/allora-network/allora-producer/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProcessedBlockRepositoryInterface is an autogenerated mock type for the ProcessedBlockRepositoryInterface type
type ProcessedBlockRepositoryInterface struct {
	mock.Mock
}

type ProcessedBlockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessedBlockRepositoryInterface) EXPECT() *ProcessedBlockRepositoryInterface_Expecter {
	return &ProcessedBlockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetLastProcessedBlock provides a mock function with given fields: ctx
func (_m *ProcessedBlockRepositoryInterface) GetLastProcessedBlock(ctx context.Context) (domain.ProcessedBlock, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlock")
	}

	var r0 domain.ProcessedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ProcessedBlock, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ProcessedBlock); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.ProcessedBlock)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlock'
type ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call struct {
	*mock.Call
}

// GetLastProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProcessedBlockRepositoryInterface_Expecter) GetLastProcessedBlock(ctx interface{}) *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call {
	return &ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call{Call: _e.mock.On("GetLastProcessedBlock", ctx)}
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call) Run(run func(ctx context.Context)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call) Return(_a0 domain.ProcessedBlock, _a1 error) *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call) RunAndReturn(run func(context.Context) (domain.ProcessedBlock, error)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedBlockEvent provides a mock function with given fields: ctx
func (_m *ProcessedBlockRepositoryInterface) GetLastProcessedBlockEvent(ctx context.Context) (domain.ProcessedBlockEvent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlockEvent")
	}

	var r0 domain.ProcessedBlockEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ProcessedBlockEvent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ProcessedBlockEvent); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.ProcessedBlockEvent)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlockEvent'
type ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call struct {
	*mock.Call
}

// GetLastProcessedBlockEvent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProcessedBlockRepositoryInterface_Expecter) GetLastProcessedBlockEvent(ctx interface{}) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call {
	return &ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call{Call: _e.mock.On("GetLastProcessedBlockEvent", ctx)}
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call) Run(run func(ctx context.Context)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call) Return(_a0 domain.ProcessedBlockEvent, _a1 error) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call) RunAndReturn(run func(context.Context) (domain.ProcessedBlockEvent, error)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProcessedBlock provides a mock function with given fields: ctx, block
func (_m *ProcessedBlockRepositoryInterface) SaveProcessedBlock(ctx context.Context, block domain.ProcessedBlock) error {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for SaveProcessedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProcessedBlock) error); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProcessedBlock'
type ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call struct {
	*mock.Call
}

// SaveProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - block domain.ProcessedBlock
func (_e *ProcessedBlockRepositoryInterface_Expecter) SaveProcessedBlock(ctx interface{}, block interface{}) *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call {
	return &ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call{Call: _e.mock.On("SaveProcessedBlock", ctx, block)}
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call) Run(run func(ctx context.Context, block domain.ProcessedBlock)) *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProcessedBlock))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call) Return(_a0 error) *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call) RunAndReturn(run func(context.Context, domain.ProcessedBlock) error) *ProcessedBlockRepositoryInterface_SaveProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProcessedBlockEvent provides a mock function with given fields: ctx, blockEvent
func (_m *ProcessedBlockRepositoryInterface) SaveProcessedBlockEvent(ctx context.Context, blockEvent domain.ProcessedBlockEvent) error {
	ret := _m.Called(ctx, blockEvent)

	if len(ret) == 0 {
		panic("no return value specified for SaveProcessedBlockEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProcessedBlockEvent) error); ok {
		r0 = rf(ctx, blockEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProcessedBlockEvent'
type ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call struct {
	*mock.Call
}

// SaveProcessedBlockEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - blockEvent domain.ProcessedBlockEvent
func (_e *ProcessedBlockRepositoryInterface_Expecter) SaveProcessedBlockEvent(ctx interface{}, blockEvent interface{}) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call {
	return &ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call{Call: _e.mock.On("SaveProcessedBlockEvent", ctx, blockEvent)}
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call) Run(run func(ctx context.Context, blockEvent domain.ProcessedBlockEvent)) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProcessedBlockEvent))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call) Return(_a0 error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call) RunAndReturn(run func(context.Context, domain.ProcessedBlockEvent) error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessedBlockRepositoryInterface creates a new instance of ProcessedBlockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessedBlockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessedBlockRepositoryInterface {
	mock := &ProcessedBlockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
