// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/allora-network/allora-producer/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProcessedBlockRepositoryInterface is an autogenerated mock type for the ProcessedBlockRepositoryInterface type
type ProcessedBlockRepositoryInterface struct {
	mock.Mock
}

type ProcessedBlockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessedBlockRepositoryInterface) EXPECT() *ProcessedBlockRepositoryInterface_Expecter {
	return &ProcessedBlockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetLastProcessedBlockEvents provides a mock function with given fields: ctx
func (_m *ProcessedBlockRepositoryInterface) GetLastProcessedBlockEvents(ctx context.Context) (domain.ProcessedBlockEvents, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlockEvents")
	}

	var r0 domain.ProcessedBlockEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ProcessedBlockEvents, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ProcessedBlockEvents); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.ProcessedBlockEvents)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlockEvents'
type ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call struct {
	*mock.Call
}

// GetLastProcessedBlockEvents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProcessedBlockRepositoryInterface_Expecter) GetLastProcessedBlockEvents(ctx interface{}) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call {
	return &ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call{Call: _e.mock.On("GetLastProcessedBlockEvents", ctx)}
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call) Run(run func(ctx context.Context)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call) Return(_a0 domain.ProcessedBlockEvents, _a1 error) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call) RunAndReturn(run func(context.Context) (domain.ProcessedBlockEvents, error)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedBlockTransactions provides a mock function with given fields: ctx
func (_m *ProcessedBlockRepositoryInterface) GetLastProcessedBlockTransactions(ctx context.Context) (domain.ProcessedBlockTransactions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlockTransactions")
	}

	var r0 domain.ProcessedBlockTransactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ProcessedBlockTransactions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ProcessedBlockTransactions); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.ProcessedBlockTransactions)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlockTransactions'
type ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call struct {
	*mock.Call
}

// GetLastProcessedBlockTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProcessedBlockRepositoryInterface_Expecter) GetLastProcessedBlockTransactions(ctx interface{}) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call {
	return &ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call{Call: _e.mock.On("GetLastProcessedBlockTransactions", ctx)}
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call) Run(run func(ctx context.Context)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call) Return(_a0 domain.ProcessedBlockTransactions, _a1 error) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call) RunAndReturn(run func(context.Context) (domain.ProcessedBlockTransactions, error)) *ProcessedBlockRepositoryInterface_GetLastProcessedBlockTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProcessedBlockEvents provides a mock function with given fields: ctx, blockEvent
func (_m *ProcessedBlockRepositoryInterface) SaveProcessedBlockEvents(ctx context.Context, blockEvent domain.ProcessedBlockEvents) error {
	ret := _m.Called(ctx, blockEvent)

	if len(ret) == 0 {
		panic("no return value specified for SaveProcessedBlockEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProcessedBlockEvents) error); ok {
		r0 = rf(ctx, blockEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProcessedBlockEvents'
type ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call struct {
	*mock.Call
}

// SaveProcessedBlockEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - blockEvent domain.ProcessedBlockEvents
func (_e *ProcessedBlockRepositoryInterface_Expecter) SaveProcessedBlockEvents(ctx interface{}, blockEvent interface{}) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call {
	return &ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call{Call: _e.mock.On("SaveProcessedBlockEvents", ctx, blockEvent)}
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call) Run(run func(ctx context.Context, blockEvent domain.ProcessedBlockEvents)) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProcessedBlockEvents))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call) Return(_a0 error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call) RunAndReturn(run func(context.Context, domain.ProcessedBlockEvents) error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SaveProcessedBlockTransactions provides a mock function with given fields: ctx, block
func (_m *ProcessedBlockRepositoryInterface) SaveProcessedBlockTransactions(ctx context.Context, block domain.ProcessedBlockTransactions) error {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for SaveProcessedBlockTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProcessedBlockTransactions) error); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveProcessedBlockTransactions'
type ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call struct {
	*mock.Call
}

// SaveProcessedBlockTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - block domain.ProcessedBlockTransactions
func (_e *ProcessedBlockRepositoryInterface_Expecter) SaveProcessedBlockTransactions(ctx interface{}, block interface{}) *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call {
	return &ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call{Call: _e.mock.On("SaveProcessedBlockTransactions", ctx, block)}
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call) Run(run func(ctx context.Context, block domain.ProcessedBlockTransactions)) *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProcessedBlockTransactions))
	})
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call) Return(_a0 error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call) RunAndReturn(run func(context.Context, domain.ProcessedBlockTransactions) error) *ProcessedBlockRepositoryInterface_SaveProcessedBlockTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessedBlockRepositoryInterface creates a new instance of ProcessedBlockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessedBlockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessedBlockRepositoryInterface {
	mock := &ProcessedBlockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
