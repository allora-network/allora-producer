// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StreamingClient is an autogenerated mock type for the StreamingClient type
type StreamingClient struct {
	mock.Mock
}

type StreamingClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamingClient) EXPECT() *StreamingClient_Expecter {
	return &StreamingClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *StreamingClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamingClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type StreamingClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *StreamingClient_Expecter) Close() *StreamingClient_Close_Call {
	return &StreamingClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *StreamingClient_Close_Call) Run(run func()) *StreamingClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StreamingClient_Close_Call) Return(_a0 error) *StreamingClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamingClient_Close_Call) RunAndReturn(run func() error) *StreamingClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAsync provides a mock function with given fields: ctx, msgType, message, blockHeight
func (_m *StreamingClient) PublishAsync(ctx context.Context, msgType string, message []byte, blockHeight int64) error {
	ret := _m.Called(ctx, msgType, message, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for PublishAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, int64) error); ok {
		r0 = rf(ctx, msgType, message, blockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamingClient_PublishAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAsync'
type StreamingClient_PublishAsync_Call struct {
	*mock.Call
}

// PublishAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - msgType string
//   - message []byte
//   - blockHeight int64
func (_e *StreamingClient_Expecter) PublishAsync(ctx interface{}, msgType interface{}, message interface{}, blockHeight interface{}) *StreamingClient_PublishAsync_Call {
	return &StreamingClient_PublishAsync_Call{Call: _e.mock.On("PublishAsync", ctx, msgType, message, blockHeight)}
}

func (_c *StreamingClient_PublishAsync_Call) Run(run func(ctx context.Context, msgType string, message []byte, blockHeight int64)) *StreamingClient_PublishAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(int64))
	})
	return _c
}

func (_c *StreamingClient_PublishAsync_Call) Return(_a0 error) *StreamingClient_PublishAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamingClient_PublishAsync_Call) RunAndReturn(run func(context.Context, string, []byte, int64) error) *StreamingClient_PublishAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamingClient creates a new instance of StreamingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamingClient {
	mock := &StreamingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
