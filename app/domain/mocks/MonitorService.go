// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	coretypes "github.com/cometbft/cometbft/rpc/core/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// MonitorService is an autogenerated mock type for the MonitorService type
type MonitorService struct {
	mock.Mock
}

type MonitorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MonitorService) EXPECT() *MonitorService_Expecter {
	return &MonitorService_Expecter{mock: &_m.Mock}
}

// ProcessBlock provides a mock function with given fields: ctx, block
func (_m *MonitorService) ProcessBlock(ctx context.Context, block *coretypes.ResultBlock) error {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.ResultBlock) error); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorService_ProcessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBlock'
type MonitorService_ProcessBlock_Call struct {
	*mock.Call
}

// ProcessBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - block *coretypes.ResultBlock
func (_e *MonitorService_Expecter) ProcessBlock(ctx interface{}, block interface{}) *MonitorService_ProcessBlock_Call {
	return &MonitorService_ProcessBlock_Call{Call: _e.mock.On("ProcessBlock", ctx, block)}
}

func (_c *MonitorService_ProcessBlock_Call) Run(run func(ctx context.Context, block *coretypes.ResultBlock)) *MonitorService_ProcessBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.ResultBlock))
	})
	return _c
}

func (_c *MonitorService_ProcessBlock_Call) Return(_a0 error) *MonitorService_ProcessBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitorService_ProcessBlock_Call) RunAndReturn(run func(context.Context, *coretypes.ResultBlock) error) *MonitorService_ProcessBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessBlockResults provides a mock function with given fields: ctx, blockResults, header
func (_m *MonitorService) ProcessBlockResults(ctx context.Context, blockResults *coretypes.ResultBlockResults, header *types.Header) error {
	ret := _m.Called(ctx, blockResults, header)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlockResults")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.ResultBlockResults, *types.Header) error); ok {
		r0 = rf(ctx, blockResults, header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MonitorService_ProcessBlockResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBlockResults'
type MonitorService_ProcessBlockResults_Call struct {
	*mock.Call
}

// ProcessBlockResults is a helper method to define mock.On call
//   - ctx context.Context
//   - blockResults *coretypes.ResultBlockResults
//   - header *types.Header
func (_e *MonitorService_Expecter) ProcessBlockResults(ctx interface{}, blockResults interface{}, header interface{}) *MonitorService_ProcessBlockResults_Call {
	return &MonitorService_ProcessBlockResults_Call{Call: _e.mock.On("ProcessBlockResults", ctx, blockResults, header)}
}

func (_c *MonitorService_ProcessBlockResults_Call) Run(run func(ctx context.Context, blockResults *coretypes.ResultBlockResults, header *types.Header)) *MonitorService_ProcessBlockResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.ResultBlockResults), args[2].(*types.Header))
	})
	return _c
}

func (_c *MonitorService_ProcessBlockResults_Call) Return(_a0 error) *MonitorService_ProcessBlockResults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MonitorService_ProcessBlockResults_Call) RunAndReturn(run func(context.Context, *coretypes.ResultBlockResults, *types.Header) error) *MonitorService_ProcessBlockResults_Call {
	_c.Call.Return(run)
	return _c
}

// NewMonitorService creates a new instance of MonitorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMonitorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MonitorService {
	mock := &MonitorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
